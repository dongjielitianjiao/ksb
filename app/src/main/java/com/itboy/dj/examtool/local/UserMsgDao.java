package com.itboy.dj.examtool.local;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MSG".
*/
public class UserMsgDao extends AbstractDao<UserMsg, Void> {

    public static final String TABLENAME = "USER_MSG";

    /**
     * Properties of entity UserMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property MovePhone = new Property(1, String.class, "movePhone", false, "MOVE_PHONE");
        public final static Property Pwd = new Property(2, String.class, "pwd", false, "PWD");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property HeadImgUrl = new Property(4, String.class, "headImgUrl", false, "HEAD_IMG_URL");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property AccessToken = new Property(6, String.class, "accessToken", false, "ACCESS_TOKEN");
    }


    public UserMsgDao(DaoConfig config) {
        super(config);
    }
    
    public UserMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MSG\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"MOVE_PHONE\" TEXT UNIQUE ," + // 1: movePhone
                "\"PWD\" TEXT UNIQUE ," + // 2: pwd
                "\"NAME\" TEXT UNIQUE ," + // 3: name
                "\"HEAD_IMG_URL\" TEXT UNIQUE ," + // 4: headImgUrl
                "\"SEX\" TEXT UNIQUE ," + // 5: sex
                "\"ACCESS_TOKEN\" TEXT UNIQUE );"); // 6: accessToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserMsg entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String movePhone = entity.getMovePhone();
        if (movePhone != null) {
            stmt.bindString(2, movePhone);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(3, pwd);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(5, headImgUrl);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(7, accessToken);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserMsg entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String movePhone = entity.getMovePhone();
        if (movePhone != null) {
            stmt.bindString(2, movePhone);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(3, pwd);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String headImgUrl = entity.getHeadImgUrl();
        if (headImgUrl != null) {
            stmt.bindString(5, headImgUrl);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(7, accessToken);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserMsg readEntity(Cursor cursor, int offset) {
        UserMsg entity = new UserMsg( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // movePhone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headImgUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // accessToken
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserMsg entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMovePhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPwd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadImgUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccessToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserMsg entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserMsg entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserMsg entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
